#{{ ansible_managed}}

[DEFAULT]
# Disable stderr logging
use_stderr = False
debug = {{ debug }}
auth_strategy = keystone
aodh_is_enabled = {{ ceilometer_aodh_enabled | bool }}

# RPC
transport_url = {{ ceilometer_oslomsg_rpc_transport }}://{% for host in ceilometer_oslomsg_rpc_servers.split(',') %}{{ ceilometer_oslomsg_rpc_userid }}:{{ ceilometer_oslomsg_rpc_password }}@{{ host }}:{{ ceilometer_oslomsg_rpc_port }}{% if not loop.last %},{% else %}/{{ ceilometer_oslomsg_rpc_vhost }}{% if ceilometer_oslomsg_rpc_use_ssl | bool %}?ssl=1{% else %}?ssl=0{% endif %}{% endif %}{% endfor %}

{% if ceilometer_gnocchi_enabled | bool %}
event_dispatchers = gnocchi
meter_dispatchers = gnocchi
{% else %}
meter_dispatchers = database
event_dispatchers = database
{% endif %}

{% if 'ceilometer_agent_central' in group_names %}
polling_namespaces = central
{% endif %}

[oslo_messaging_rabbit]
ssl = {{ ceilometer_oslomsg_rpc_use_ssl }}

[api]
gnocchi_is_enabled = {{ ceilometer_gnocchi_enabled | bool }}

[notification]
workers = {{ ceilometer_notification_workers }}
store_events = {{ not ceilometer_gnocchi_enabled | bool }}

# Notification queues to listen on

# Ceilometer needs to connect to it's own notification vhost
{% for host in groups[ceilometer_oslomsg_notify_host_group] %}
messaging_urls = {{ ceilometer_oslomsg_notify_transport }}://{{ ceilometer_oslomsg_notify_userid }}:{{ ceilometer_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ ceilometer_oslomsg_notify_port }}/{{ ceilometer_oslomsg_notify_vhost }}
{% endfor %}

{% if glance_ceilometer_enabled %}
# Glance notifications
{% for host in groups[glance_oslomsg_notify_host_group] %}
messaging_urls = {{ glance_oslomsg_notify_transport }}://{{ glance_oslomsg_notify_userid }}:{{ glance_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ glance_oslomsg_notify_port }}/{{ glance_oslomsg_notify_vhost }}
{% endfor %}
{% endif %}

{% if nova_ceilometer_enabled %}
# Nova notifications
{% for host in groups[nova_oslomsg_notify_host_group] %}
messaging_urls = {{ nova_oslomsg_notify_transport }}://{{ nova_oslomsg_notify_userid }}:{{ nova_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ nova_oslomsg_notify_port }}/{{ nova_oslomsg_notify_vhost }}
{% endfor %}
{% endif %}

{% if cinder_ceilometer_enabled %}
# Cinder notifications
{% for host in groups[cinder_oslomsg_notify_host_group] %}
messaging_urls = {{ cinder_oslomsg_notify_transport }}://{{ cinder_oslomsg_notify_userid }}:{{ cinder_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ cinder_oslomsg_notify_port }}/{{ cinder_oslomsg_notify_vhost }}
{% endfor %}
{% endif %}

{% if neutron_ceilometer_enabled %}
# Neutron notifications
{% for host in groups[neutron_oslomsg_notify_host_group] %}
messaging_urls = {{ neutron_oslomsg_notify_transport }}://{{ neutron_oslomsg_notify_userid }}:{{ neutron_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ neutron_oslomsg_notify_port }}/{{ neutron_oslomsg_notify_vhost }}
{% endfor %}
{% endif %}

{% if heat_ceilometer_enabled %}
# Heat notifications
{% for host in groups[heat_oslomsg_notify_host_group] %}
messaging_urls = {{ heat_oslomsg_notify_transport }}://{{ heat_oslomsg_notify_userid }}:{{ heat_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ heat_oslomsg_notify_port }}/{{ heat_oslomsg_notify_vhost }}
{% endfor %}
{% endif %}

{% if keystone_ceilometer_enabled %}
# Keystone notifications
{% for host in groups[keystone_oslomsg_notify_host_group] %}
messaging_urls = {{ keystone_oslomsg_notify_transport }}://{{ keystone_oslomsg_notify_userid }}:{{ keystone_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ keystone_oslomsg_notify_port }}/{{ keystone_oslomsg_notify_vhost }}
{% endfor %}
{% endif %}

{% if swift_ceilometer_enabled %}
# Ceilometer notifications
{% for host in groups[swift_oslomsg_notify_host_group] %}
messaging_urls = {{ swift_oslomsg_notify_transport }}://{{ swift_oslomsg_notify_userid }}:{{ swift_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ swift_oslomsg_notify_port }}/{{ swift_oslomsg_notify_vhost }}
{% endfor %}
{% endif %}

{% if sahara_ceilometer_enabled %}
# Sahara notifications
{% for host in groups[sahara_oslomsg_notify_host_group] %}
messaging_urls = {{ sahara_oslomsg_notify_transport }}://{{ sahara_oslomsg_notify_userid }}:{{ sahara_oslomsg_notify_password }}@{{ hostvars[host]['ansible_host'] }}:{{ sahara_oslomsg_notify_port }}/{{ sahara_oslomsg_notify_vhost }}
{% endfor %}
{% endif %}

{% if ceilometer_gnocchi_enabled | bool %}
[dispatcher_gnocchi]
archive_policy = low
{% if gnocchi_storage_driver is defined and gnocchi_storage_driver == 'swift' %}
filter_service_activity = True
filter_project = {{ gnocchi_service_project_name }}
{% endif %}

[storage]
max_retries = 80
{% endif %}

[keystone_authtoken]
insecure = {{ keystone_service_internaluri_insecure | bool }}
www_authenticate_uri = {{ keystone_service_internaluri }}
auth_url = {{ keystone_service_adminuri }}
auth_type = {{ ceilometer_keystone_auth_plugin }}
project_domain_id = {{ ceilometer_service_project_domain_id }}
user_domain_id = {{ ceilometer_service_user_domain_id }}
project_name = {{ ceilometer_service_project_name }}
username = {{ ceilometer_service_user_name }}
password = {{ ceilometer_service_password }}
region_name = {{ ceilometer_service_region }}
interface = {{ ceilometer_service_interface }}

memcached_servers = {{ memcached_servers }}

token_cache_time = 300

memcache_security_strategy = ENCRYPT
memcache_secret_key = {{ memcached_encryption_key }}

[publisher]
telemetry_secret = {{ ceilometer_telemetry_secret }}

[service_credentials]
insecure = {{ keystone_service_internaluri_insecure | bool }}
auth_url = {{ keystone_service_adminurl }}
auth_type = {{ ceilometer_keystone_auth_plugin }}
project_domain_id = {{ ceilometer_service_project_domain_id }}
user_domain_id = {{ ceilometer_service_user_domain_id }}
project_name = {{ ceilometer_service_project_name }}
username = {{ ceilometer_service_user_name }}
password = {{ ceilometer_service_password }}
region_name = {{ ceilometer_service_region }}
interface = {{ ceilometer_service_interface }}
